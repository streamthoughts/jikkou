#!/usr/bin/env bash
#
# jikkou Bash Completion
# =======================
#
# Bash completion support for the `jikkou` command,
# generated by [picocli](http://picocli.info/) version 4.6.3.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `jikkou [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'jikkou (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  # Only initialize completions module once to avoid unregistering existing completions.
  if ! type compdef > /dev/null; then
    autoload -U +X compinit && compinit
  fi
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# Bash completion entry point function.
# _complete_jikkou finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_jikkou() {
  # Edge case: if command line has no space after subcommand, then don't assume this subcommand is selected (remkop/picocli#1468).
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} validate" ];    then _picocli_jikkou; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} topics" ];    then _picocli_jikkou; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} acls" ];    then _picocli_jikkou; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} brokers" ];    then _picocli_jikkou; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} quotas" ];    then _picocli_jikkou; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} extensions" ];    then _picocli_jikkou; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config" ];    then _picocli_jikkou; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} help" ];    then _picocli_jikkou; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} generate-completion" ];    then _picocli_jikkou; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} topics alter" ];    then _picocli_jikkou_topics; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} topics apply" ];    then _picocli_jikkou_topics; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} topics create" ];    then _picocli_jikkou_topics; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} topics delete" ];    then _picocli_jikkou_topics; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} topics describe" ];    then _picocli_jikkou_topics; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} topics help" ];    then _picocli_jikkou_topics; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} acls apply" ];    then _picocli_jikkou_acls; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} acls create" ];    then _picocli_jikkou_acls; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} acls delete" ];    then _picocli_jikkou_acls; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} acls describe" ];    then _picocli_jikkou_acls; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} acls help" ];    then _picocli_jikkou_acls; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} brokers describe" ];    then _picocli_jikkou_brokers; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} brokers help" ];    then _picocli_jikkou_brokers; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} quotas alter" ];    then _picocli_jikkou_quotas; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} quotas apply" ];    then _picocli_jikkou_quotas; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} quotas create" ];    then _picocli_jikkou_quotas; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} quotas delete" ];    then _picocli_jikkou_quotas; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} quotas describe" ];    then _picocli_jikkou_quotas; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} quotas help" ];    then _picocli_jikkou_quotas; return $?; fi
  if [ "${COMP_LINE}" = "${COMP_WORDS[0]} config get" ];    then _picocli_jikkou_config; return $?; fi

  # Find the longest sequence of subcommands and call the bash function for that subcommand.
  local cmds0=(validate)
  local cmds1=(topics)
  local cmds2=(acls)
  local cmds3=(brokers)
  local cmds4=(quotas)
  local cmds5=(extensions)
  local cmds6=(config)
  local cmds7=(help)
  local cmds8=(generate-completion)
  local cmds9=(topics alter)
  local cmds10=(topics apply)
  local cmds11=(topics create)
  local cmds12=(topics delete)
  local cmds13=(topics describe)
  local cmds14=(topics help)
  local cmds15=(acls apply)
  local cmds16=(acls create)
  local cmds17=(acls delete)
  local cmds18=(acls describe)
  local cmds19=(acls help)
  local cmds20=(brokers describe)
  local cmds21=(brokers help)
  local cmds22=(quotas alter)
  local cmds23=(quotas apply)
  local cmds24=(quotas create)
  local cmds25=(quotas delete)
  local cmds26=(quotas describe)
  local cmds27=(quotas help)
  local cmds28=(config get)

  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_jikkou_config_get; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_jikkou_quotas_help; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_jikkou_quotas_describe; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_jikkou_quotas_delete; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_jikkou_quotas_create; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_jikkou_quotas_apply; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_jikkou_quotas_alter; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_jikkou_brokers_help; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_jikkou_brokers_describe; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_jikkou_acls_help; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_jikkou_acls_describe; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_jikkou_acls_delete; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_jikkou_acls_create; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_jikkou_acls_apply; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_jikkou_topics_help; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_jikkou_topics_describe; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_jikkou_topics_delete; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_jikkou_topics_create; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_jikkou_topics_apply; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_jikkou_topics_alter; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_jikkou_generatecompletion; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_jikkou_help; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_jikkou_config; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_jikkou_extensions; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_jikkou_quotas; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_jikkou_brokers; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_jikkou_acls; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_jikkou_topics; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_jikkou_validate; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_jikkou; return $?;
}

# Generates completions for the options and subcommands of the `jikkou` command.
function _picocli_jikkou() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="validate topics acls brokers quotas extensions config help generate-completion"
  local flag_opts="-h --help -V --version"
  local arg_opts="--bootstrap-servers --command-config --command-property --config-file"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --bootstrap-servers)
      return
      ;;
    --command-config)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --command-property)
      return
      ;;
    --config-file)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `validate` subcommand.
function _picocli_jikkou_validate() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `topics` subcommand.
function _picocli_jikkou_topics() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="alter apply create delete describe help"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `acls` subcommand.
function _picocli_jikkou_acls() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="apply create delete describe help"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `brokers` subcommand.
function _picocli_jikkou_brokers() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="describe help"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `quotas` subcommand.
function _picocli_jikkou_quotas() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="alter apply create delete describe help"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `extensions` subcommand.
function _picocli_jikkou_extensions() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `config` subcommand.
function _picocli_jikkou_config() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="get"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_jikkou_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="validate topics acls brokers quotas extensions config generate-completion"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `generate-completion` subcommand.
function _picocli_jikkou_generatecompletion() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `alter` subcommand.
function _picocli_jikkou_topics_alter() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --delete-orphans -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `apply` subcommand.
function _picocli_jikkou_topics_apply() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --delete-config-orphans --delete-topic-orphans --exclude-internals -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_jikkou_topics_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_jikkou_topics_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --exclude-internals -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `describe` subcommand.
function _picocli_jikkou_topics_describe() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --default-configs --static-broker-configs --dynamic-broker-configs -h --help -V --version"
  local arg_opts="--exclude --include --output-file"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --output-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_jikkou_topics_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="alter apply create delete describe"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `apply` subcommand.
function _picocli_jikkou_acls_apply() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --delete-orphans -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_jikkou_acls_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --delete-orphans -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_jikkou_acls_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --delete-orphans -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `describe` subcommand.
function _picocli_jikkou_acls_describe() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run -h --help -V --version"
  local arg_opts="--exclude --include --file-path"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --file-path)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_jikkou_acls_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="apply create delete describe"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `describe` subcommand.
function _picocli_jikkou_brokers_describe() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --default-configs --static-broker-configs --dynamic-broker-configs -h --help -V --version"
  local arg_opts="--exclude --include --file-path"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --file-path)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_jikkou_brokers_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="describe"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `alter` subcommand.
function _picocli_jikkou_quotas_alter() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --delete-orphans -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `apply` subcommand.
function _picocli_jikkou_quotas_apply() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run --delete-config-orphans --delete-quota-orphans -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_jikkou_quotas_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_jikkou_quotas_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run -h --help -V --version"
  local arg_opts="--exclude --include --files -f --file-name -n --set-label -s --set-var -v"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --files|-f)
      return
      ;;
    --file-name|-n)
      return
      ;;
    --set-label|-s)
      return
      ;;
    --set-var|-v)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `describe` subcommand.
function _picocli_jikkou_quotas_describe() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--verbose --yes --dry-run -h --help -V --version"
  local arg_opts="--exclude --include --output-file"

  type compopt &>/dev/null && compopt +o default

  case ${prev_word} in
    --exclude)
      return
      ;;
    --include)
      return
      ;;
    --output-file)
      local IFS=$'\n'
      type compopt &>/dev/null && compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `help` subcommand.
function _picocli_jikkou_quotas_help() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="alter apply create delete describe"
  local flag_opts="-h --help"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_jikkou_config_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="--debug --comments -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `jikkou`, `jikkou.sh`, and `jikkou.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_jikkou` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_jikkou -o default jikkou jikkou.sh jikkou.bash
