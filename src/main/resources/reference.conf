jikkou {

  # The KafkaResourceManager classes and configurations used for managing kafka resources
  managers {
    kafka {
      brokers {
        type = io.streamthoughts.jikkou.api.manager.kafka.AdminClientKafkaBrokerManager
        config = {
            adminClient = ${jikkou.adminClient}
            kafka.brokers = ${jikkou.kafka.brokers}
        }
      }
      topics {
        type = io.streamthoughts.jikkou.api.manager.kafka.AdminClientKafkaTopicManager
        config = {
            adminClient = ${jikkou.adminClient}
            kafka.brokers = ${jikkou.kafka.brokers}
        }
      }

      acls {
        type = io.streamthoughts.jikkou.api.manager.kafka.AdminClientKafkaAclsManager
        config = {
            adminClient = ${jikkou.adminClient}
            kafka.brokers = ${jikkou.kafka.brokers}
        }
      }

      quotas {
        type = io.streamthoughts.jikkou.api.manager.kafka.AdminClientKafkaQuotasManager
        config = {
            adminClient = ${jikkou.adminClient}
            kafka.brokers = ${jikkou.kafka.brokers}
        }
      }
    }
  }

  # The default Kafka AdminClient configuration
  adminClient {
    bootstrap.servers = ${?JIKKOU_DEFAULT_KAFKA_BOOTSTRAP_SERVERS}
  }

  # The paths from which to load extensions
  extension.paths = [${?JIKKOU_EXTENSION_PATH}]

  kafka {
    brokers {
      # If 'True' 
      wait-for-enabled = true
      wait-for-enabled = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_ENABLED}
      # The minimal number of broker that should be alive for the interceptor stops waiting.
      wait-for-min-available = 1
      wait-for-min-available = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_MIN_AVAILABLE}
      # The amount of time to wait before verifying that brokers are available.
      wait-for-retry-backoff-ms = 1000
      wait-for-retry-backoff-ms = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_RETRY_BACKOFF_MS}
      # Wait until brokers are available or this timeout is reached.
      wait-for-timeout-ms = 60000
      wait-for-timeout-ms = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_TIMEOUT_MS}
    }
  }

  # The regex patterns to use for including resources.
  include-resources = []
  # The regex patterns to use for excluding resources.
  exclude-resources = []

  template {
    values {

    }
  }

  # The default validation rules to apply on any specification files.
  validations = [
    {
        type = TopicConfigKeysValidation
        config = {}
    },
    {
      type = TopicNameRegexValidation
      config = {
        topic-name-regex = "[a-zA-Z0-9\\._\\-]+"
        topic-name-regex = ${?VALIDATION_DEFAULT_TOPIC_NAME_REGEX}
      }
    },
    {
      type = TopicMinNumPartitionsValidation
      config = {
        topic-min-num-partitions = 1
        topic-min-num-partitions = ${?VALIDATION_DEFAULT_TOPIC_MIN_NUM_PARTITIONS}
      }
    },
    {
      type = TopicMinReplicationFactorValidation
      config = {
        topic-min-replication-factor = 1
        topic-min-replication-factor = ${?VALIDATION_DEFAULT_TOPIC_MIN_REPLICATION_FACTOR}
      }
    }
  ]

  # The default transformations to apply on any specification files.
  transforms = []
}