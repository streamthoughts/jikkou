#
# SPDX-License-Identifier: Apache-2.0
# Copyright (c) The original authors
#
# Licensed under the Apache Software License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0
#
jikkou {

  # Configure Jikkou Proxy Mode
  # proxy {
  #  url = "http://localhost:8080"
  # }

  # Configure Extension Providers
  extension {
  }

  providers = [
    # Core
    {
      enabled = true
      name = core
      type = io.streamthoughts.jikkou.core.CoreExtensionProvider
    },
    # Apache Kafka
    {
      enabled = true
      name = kafka
      type = io.streamthoughts.jikkou.kafka.KafkaExtensionProvider
      config = {
        # The default Kafka Client configuration
        client {
          bootstrap.servers = "localhost:9092"
          bootstrap.servers = ${?JIKKOU_DEFAULT_KAFKA_BOOTSTRAP_SERVERS}
        }

        brokers {
          # If 'True'
          waitForEnabled = true
          waitForEnabled = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_ENABLED}
          # The minimal number of brokers that should be alive for the CLI stops waiting.
          waitForMinAvailable = 1
          waitForMinAvailable = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_MIN_AVAILABLE}
          # The amount of time to wait before verifying that brokers are available.
          waitForRetryBackoffMs = 1000
          waitForRetryBackoffMs = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_RETRY_BACKOFF_MS}
          # Wait until brokers are available or this timeout is reached.
          waitForTimeoutMs = 60000
          waitForTimeoutMs = ${?JIKKOU_KAFKA_BROKERS_WAIT_FOR_TIMEOUT_MS}
        }
      }
    },
    # Schema Registry
    {
      enabled = true
      name = schemaregistry
      type = io.streamthoughts.jikkou.schema.registry.SchemaRegistryExtensionProvider
      config = {
        url = "http://localhost:8081"
        url = ${?JIKKOU_DEFAULT_SCHEMA_REGISTRY_URL}
      }
    }
  ]

  # The default custom transformations to apply on any resources.
  transformations = []

  # The default custom validations to apply on any resources.
  validations = [
    {
      name = "topicMustHaveValidName"
      type = io.streamthoughts.jikkou.kafka.validation.TopicNameRegexValidation
      priority = 100
      config = {
        topicNameRegex = "[a-zA-Z0-9\\._\\-]+"
        topicNameRegex = ${?VALIDATION_DEFAULT_TOPIC_NAME_REGEX}
      }
    },
    {
      name = "topicMustHavePartitionsEqualsOrGreaterThanOne"
      type = io.streamthoughts.jikkou.kafka.validation.TopicMinNumPartitionsValidation
      priority = 100
      config = {
        topicMinNumPartitions = 1
        topicMinNumPartitions = ${?VALIDATION_DEFAULT_TOPIC_MIN_NUM_PARTITIONS}
      }
    },
    {
      name = "topicMustHaveReplicasEqualsOrGreaterThanOne"
      type = io.streamthoughts.jikkou.kafka.validation.TopicMinReplicationFactorValidation
      priority = 100
      config = {
        topicMinReplicationFactor = 1
        topicMinReplicationFactor = ${?VALIDATION_DEFAULT_TOPIC_MIN_REPLICATION_FACTOR}
      }
    }
  ]
  # The default custom reporters to report applied changes.
  reporters = [
    # Uncomment following lines to enable default kafka reporter
    #    {
    #     name = "default"
    #      type = io.streamthoughts.jikkou.kafka.reporter.KafkaChangeReporter
    #      config = {
    #        event.source = "jikkou/cli"
    #        kafka = {
    #          topic.creation.enabled = true
    #          topic.creation.defaultReplicationFactor = 1
    #          topic.name = "jikkou-resource-change-event"
    #          client = ${jikkou.kafka.client} {
    #            client.id = "jikkou-reporter-producer"
    #          }
    #        }
    #      }
    #    }
  ]

  jinja {
    enableRecursiveMacroCalls = false
  }
}